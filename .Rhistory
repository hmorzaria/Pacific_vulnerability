#     #pause()
#
select(index.data,one_of(good.variables))  %>>%
(~subset.index.data = as.data.frame(.)) %>% #subset the original dataframe leaving only variables with highest correlations
cor %>>% #again calculate correlations and scree test
(~ corr.mat) %>>%
(~ pairs(.))
corr.mat %>>%
(~no.cols <- ncol(.)) %>>%
(~no.rows <- nrow(.))
parallel(subject=no.rows,var=no.cols,rep=100,cent=.05) %>>% #scree test
(eigen) %>%
.$qevpea %>>% (~qepva)
nScree(eigen(cor(subset.index.data))$values,qepva) %>>%
~ plotnScree((.), main=paste("Non Graphical Solutions to Scree Test _",index.name))
print("The result of the scree test should be one")
#pause()
#once extra variables have been eliminated
#run single factor solution
#can specify rotate="varimax" in pc
#SS loading is the eigenvalue
# h2is called the communality estimate. Measures the % of variance
# in an observed variable accounted for by the retained components
# factor.model finds the reproduced correlations and the communalities (the diagonals)
#Calculate theta coefficient
files.index[each.index] %>%
fread(header = T) %>%
.$V1 %>>% (~rownames(subset.index.data) <- (.))
subset.index.data %>%
PCA %>>%
(~pca.results)  %>>%
(eig) %>%
select(eigenvalue) %>%
max %>% Theta %>>%
(~ theta.result)
#
#
}
theta.result
index.name
source('E:/Archivos/1Archivos/Articulos/En preparacion/Vulnerability_GOC_Pacific/Analysis/PCA_adaptive_capacity_3.R')
as.data.frame(theta.result) %>>% (~theta.result)
rm(list=ls()) #clean up the space
#list cutom functions
#source("E:/Archivos/1Archivos/Articulos/R_functions/pause_function.R")
source("E:/Archivos/1Archivos/Articulos/R_functions/Theta_function.R")
# USER BLOCK: CHECK AND CHANGE OPTIONS HERE
#_________________________________________________________________________
#set working directories
#this should match the path where your files directories are stored
#note the "/" go in the opposite direction than in Windows explorer
threshold.value = 0.2 #this is the threshold for correlation values
#working space
analysispath="E:/Archivos/1Archivos/Articulos/En preparacion/Vulnerability_GOC_Pacific/Analysis" #put path
setwd(analysispath)
indices.sc = c("population_composition")
#Analysis expects csv files with locations as 1st column and variables as other columns, values in rows
files.index = c("PopComp.csv")
#_________________________________________________________________________
#make list to save results
results.index=list()
#use for debugging
each.index= 1
#for(each.index in 1:length(files.index))
#{
index.name = indices.sc[each.index]
#piped code
#To debug this code, insert (~ browser()) around the pipeline
#At the browser environment, one only needs to type .
#works with %>>%
#obtain correlation matrix
#get correlation matrix and statistics
#X11()
print("Correlations from full set of data")
#pause()
files.index[each.index] %>%
fread(header = T,drop=1) %>>% #eliminate column with row names, needs only data values
(~index.data)%>%
cor %>>%
(~ corr.mat) %>>%
"correlation matrix" %>>%
(~ pairs(.)) %>>% {
no.cols <- ncol(.)
no.rows <- nrow(.)
parallel(subject=no.rows,var=no.cols,rep=100,cent=.05) %>% { #scree test
.$eigen %>%
select(qevpea) %>%
nScree(eigen(cor(index.data))$values,(.$qevpea)) %>>% {
summary (.) #scree test will return number of factors according to different methods
plotnScree((.), main=paste("Non Graphical Solutions to Scree Test _",index.name))
}
}
}
# Determine Number of Factors to Extract
#This code can be use to determine the optimal number of factors, however Jacob et al (2012)
#recommends using a single factor solution
# Generally, if the goal is simple and parsimonious description of a correlation
# or covariance matrix, the first k principal components
# will do a better job than any other k-dimensional solution
#save the scree plot as a png file
dev.copy(png, paste(index.name,'.png',sep=""))
dev.off()
#now take correlation matrix and make data frame
index.data %>%
cor %>%
as.data.frame %>>%
(~ corr.mat)%>%
names %>%
as.data.frame %>>%
(~ names.mat)
names(names.mat) = ("corr_variable")
print("Now removing variables with low correlation values")
#pause()
cbind(names.mat,corr.mat) %>%
gather(variable,value,-corr_variable) %>%
filter(value!=1) %>%
filter(value!=-1) %>%
group_by(variable) %>%
summarize(mean_corr = abs(mean(value))) %>%
filter(mean_corr > threshold.value) %>>%
select(variable) %>>%
(~selected.vars)
if(nrow(selected.vars) < 4)
{
print("Analysis needs at least 4 variables, now running with lower correlation threshold value")
threshold.value = threshold.value - 0.05
cbind(names.mat,corr.mat) %>%
gather(variable,value,-corr_variable) %>%
filter(value!=1) %>%
filter(value!=-1) %>%
group_by(variable) %>%
summarize(mean_corr = abs(mean(value))) %>%
filter(mean_corr > threshold.value) %>>%
select(variable) %>>%
(~selected.vars)
if(nrow(selected.vars) < 4)
{
print("Too few variables selected, now running with lower correlation threshold value")
threshold.value = threshold.value - 0.05
cbind(names.mat,corr.mat) %>%
gather(variable,value,-corr_variable) %>%
filter(value!=1) %>%
filter(value!=-1) %>%
group_by(variable) %>%
summarize(mean_corr = abs(mean(value))) %>%
filter(mean_corr > threshold.value) %>>%
select(variable) %>>%
(~selected.vars)
}
} else {
#
selected.vars %>>%
(variable) %>%
drop.levels %>>%
(~good.variables = as.character(.))
#
#     #X11()
#
print("Correlations from subset of data with largest correlations")
#     #pause()
#
select(index.data,one_of(good.variables))  %>>%
(~subset.index.data = as.data.frame(.)) %>% #subset the original dataframe leaving only variables with highest correlations
cor %>>% #again calculate correlations and scree test
(~ corr.mat) %>>%
(~ pairs(.))
corr.mat %>>%
(~no.cols <- ncol(.)) %>>%
(~no.rows <- nrow(.))
parallel(subject=no.rows,var=no.cols,rep=100,cent=.05) %>>% #scree test
(eigen) %>%
.$qevpea %>>% (~qepva)
nScree(eigen(cor(subset.index.data))$values,qepva) %>>%
~ plotnScree((.), main=paste("Non Graphical Solutions to Scree Test _",index.name))
print("The result of the scree test should be one")
#pause()
#once extra variables have been eliminated
#run single factor solution
#can specify rotate="varimax" in pc
#SS loading is the eigenvalue
# h2is called the communality estimate. Measures the % of variance
# in an observed variable accounted for by the retained components
# factor.model finds the reproduced correlations and the communalities (the diagonals)
#Calculate theta coefficient
files.index[each.index] %>%
fread(header = T) %>%
.$V1 %>>% (~rownames(subset.index.data) <- (.))
subset.index.data %>%
PCA %>>%
(~pca.results)  %>>%
(eig) %>%
select(eigenvalue) %>%
max %>% Theta %>>%
(~ theta.result)
#
#
}
#
#
#
#
as.data.frame(theta.result) %>>% (~theta.result)
as.data.frame(theta.result) %>>% (~theta.result) %>% names() <- "Armor's Theta"
as.data.frame(theta.result) %>>% (~theta.result) %>% names(.) <- "Armor's Theta"
names(theta.result) <- "Armor's Theta"
as.data.frame(theta.result) %>>% (~theta.result)
names(theta.result) <- "Armor's Theta"
results.index$SelectedVariables =  selected.vars
results.index$PCA = "$eig = eigenvalues and variance, $ind$coord = scores, $var$coord = loadings"
results.index$SelectedVariables =  pca.results
results.index$Theta =  theta.result
results.index
pca.results$var$coord
source('E:/Archivos/1Archivos/Articulos/En preparacion/Vulnerability_GOC_Pacific/Analysis/PCA_adaptive_capacity_3.R')
source('E:/Archivos/1Archivos/Articulos/En preparacion/Vulnerability_GOC_Pacific/Analysis/PCA_adaptive_capacity_3.R')
source('E:/Archivos/1Archivos/Articulos/En preparacion/Vulnerability_GOC_Pacific/Analysis/PCA_adaptive_capacity_3.R')
files.index[each.index] %>%
fread(header = T) %>%
.$V1 %>>%
(~rownames(subset.index.data) <- (.))
%>>% names.locs
files.index[each.index] %>%
fread(header = T) %>%
.$V1 %>>%
(~rownames(subset.index.data) <- (.)) %>>%
names.locs
files.index[each.index] %>%
fread(header = T) %>%
.$V1 %>>%
(~rownames(subset.index.data) <- (.)) %>>%
(~names.locs)
names.locs
files.index[each.index] %>%
fread(header = T) %>%
.$V1 %>>%
(~rownames(subset.index.data) <- (.)) %>>%
(~names.locs = as.data.frame(.))
names.locs
pca.results$ind$coord
source('E:/Archivos/1Archivos/Articulos/En preparacion/Vulnerability_GOC_Pacific/Analysis/PCA_adaptive_capacity_3.R')
pca.files <- list.files(pattern = "\\_pca_results.csv$")
each.file = 1
this.data = read.csv(pca.files[each.file])
class(this.data)
this.data
scores.pca = pca.results$ind$coord
scores.pca
r
r
scores.pca = pca.results$ind$coord
scores$names = row.names(pca.results$ind$coord)
scores.pca$names = row.names(pca.results$ind$coord)
scores.pca$names = names.locs
scores.pca = pca.results$ind$coord
scores.pca$names = names.locs
class(names.locs)
names.locs
pca.results$ind$coord %>%
cbind(names.locs) %>>%
(~scores.pca)
pca.results$ind$coord %>%
cbind(names.locs,(.)) %>>%
(~scores.pca)
names.locs
names(names.locs) = "sites"
pca.results$ind$coord %>%
cbind(names.locs,(.)) %>>%
(~scores.pca)
write.csv(scores.pca,paste(index.name,"_pca_scores.csv",sep=""))
pca.files <- list.files(pattern = "\\_pca_scores.csv$")
this.data = read.csv(pca.files[each.file])
pca.files[each.file]
pca.files[each.file] %>% unlist(strsplit(this.folder,"/"))[2]
pca.files[each.file] %>% unlist(strsplit(.,"/"))[2]
pca.files[each.file] %>% unlist(strsplit((.),"_"))[2]
this.file = pca.files[each.file]
unlist(strsplit((this.file),c("_","."))
)
unlist(strsplit((this.file),"_"))[1]
unlist(strsplit((this.file),"_"))[1]
unlist(strsplit((this.file),"_"))[1] %>%
names(this.data$Dim.1)
this.file = pca.files[each.file]
unlist(strsplit((this.file),"_"))[1] %>>%
(~names(this.data$Dim.1) <- (.))
this.data
scores.pca
write.csv(scores.pca,paste(index.name,"_pca_scores.csv",sep=""))
pca.files[each.file] %>%
unlist(strsplit((this.file),"_"))[1] %>>%
(~names(this.data$Dim.1) <- (.))
pca.files[each.file] %>% read.csv(header=T)
pca.files <- list.files(pattern = "\\_pca_scores.csv$")
this.file = pca.files[each.file]
pca.files[each.file] %>% read.csv(header=T)
scores.pca
names(names.locs) = "sites"
pca.results$ind$coord %>%
cbind(names.locs,(.)) %>>%
(~scores.pca)
names(names.locs) = "sites"
pca.results$ind$coord %>%
cbind(names.locs) %>>%
(~scores.pca)
write.csv(scores.pca,paste(index.name,"_pca_scores.csv",sep=""))
this.file = pca.files[each.file]
pca.files[each.file] %>% read.csv(header=T)
pca.files[each.file] %>% read.csv(header=T) %>% select(sites,Dim.1)
this.file = pca.files[each.file]
pca.files[each.file] %>%
read.csv(header=T) %>%
select(Dim.1) %>>%
(~this.index.score)
unlist(strsplit((this.file),"_"))[1] %>>%
(~names(this.index.score) <- (.))
this.index.score
?spapply
?sapply
?apply
?lapply
?sapply
this.index.score$Dim.1
this.index.score
NormFunc[this.index.score[,1]]
NormFunc <- function(x) (x-min.score)/(max.score-min.score)
NormFunc[this.index.score[,1]]
NormFunc(this.index.score[,1])
this.index.score %>>%
(~max.score <- max (.)) %>>%
(~min.score <- min (.)) %>%
this.index.score %>>%
(~max.score <- max (.)) %>>%
(~min.score <- min (.)
)
NormFunc(this.index.score[,1])
normal.score = cbind(this.index.score,NormFunc(this.index.score[,1])
)
normal.score
pca.files[each.file] %>%
read.csv(header=T) %>%
select(Dim.1)
pca.files[each.file] %>%
read.csv(header=T)
pca.files[each.file] %>%
read.csv(header=T) %>%
select(sites,Dim.1) %>>%
(~this.index.score)
this.index.score %>>% .$Dim.1
this.index.score %>>%
select(Dim.1) %>%
(~max.score <- max (.)) %>>%
(~min.score <- min (.))
pca.files[each.file] %>%
read.csv(header=T) %>%
select(sites,Dim.1) %>>%
(~this.index.score)
this.index.score %>%
select(Dim.1)
this.index.score %>%
select(Dim.1) %>>%
(~max.score <- max (.))
max.score
his.index.score %>%
select(Dim.1) %>>%
(~max.score <- max (.)) %>>%
(~min.score <- min (.))
this.index.score %>%
select(Dim.1) %>>%
(~max.score <- max (.)) %>>%
(~min.score <- min (.))
NormFunc <- function(x) (x-min.score)/(max.score-min.score)
normal.score = cbind(this.index.score,NormFunc(this.index.score[,1])
)
normal.score = cbind(this.index.score,NormFunc(this.index.score[,2]))
normal.score
adaptive_capacity = as.data.frame(matrix(0,nrow=0,ncol=0))
NormFunc(this.index.score[,2]) %>% (~normalized)
NormFunc(this.index.score[,2]) %>>% (~normalized)
NormFunc(this.index.score[,2]) %>>% (~normalized = as.data.frame(.))
NormFunc(this.index.score[,2]) %>%
as.data.frame %>>% (~normalized)
source('E:/Archivos/1Archivos/Articulos/En preparacion/Vulnerability_GOC_Pacific/Analysis/PCA_adaptive_capacity_3.R')
source('E:/Archivos/1Archivos/Articulos/En preparacion/Vulnerability_GOC_Pacific/Analysis/PCA_adaptive_capacity_3.R')
this.file
pca.files[each.file] %>%
read.csv(header=T) %>%
select(sites,Dim.1) %>>%
(~this.index.score)
pca.files[each.file] %>%
read.csv(header=T) %>%
select(Dim.1) %>>%
(~this.index.score)
unlist(strsplit((this.file),"_"))[1] %>>%
(~names(this.index.score) <- (.))
pca.files[each.file] %>%
read.csv(header=T) %>%
select(sites,Dim.1) %>>%
(~this.index.score) %>%
select(2) %>>%
(~max.score <- max (.)) %>>%
(~min.score <- min (.))
this.file = pca.files[each.file]
this.index = unlist(strsplit((this.file),"_"))[1]
pca.files[each.file] %>%
read.csv(header=T) %>%
select(sites,Dim.1) %>>%
(~this.index.score) %>%
select(2) %>>%
(~max.score <- max (.)) %>>%
(~min.score <- min (.))
NormFunc(this.index.score[,2]) %>%
as.data.frame %>>% (~normalized)
names(this.index.score[2]) <- this.index
NormFunc <- function(x) (x-min.score)/(max.score-min.score)
NormFunc(this.index.score[,2]) %>%
as.data.frame %>>% (~normalized)
names(this.index.score[2]) <- this.index
this.index.score
names(this.index.score) <- c("sites",this.index)
this.index.score
source('E:/Archivos/1Archivos/Articulos/En preparacion/Vulnerability_GOC_Pacific/Analysis/PCA_adaptive_capacity_3.R')
adaptive_capacity = cbind(adaptive_capacity, normalized)
adaptive.capacity
adaptive_capacity
adaptive_capacity = as.data.frame(matrix(0,nrow=nrow(scores.pca),ncol=0))
adaptive_capacity
adaptive_capacity = cbind(adaptive_capacity, normalized)
source('E:/Archivos/1Archivos/Articulos/En preparacion/Vulnerability_GOC_Pacific/Analysis/PCA_adaptive_capacity_3.R')
mutate(adaptive_capacity=sum(1:ncol(adaptive_capacity))) %>%
mutate(normalized_AC=NormFunc(adaptive_capacity[,"adaptive_capacity"]))
source('E:/Archivos/1Archivos/Articulos/En preparacion/Vulnerability_GOC_Pacific/Analysis/PCA_adaptive_capacity_3.R')
adaptive_capacity %>%
mutate(adaptive_capacity=sum(1:ncol(adaptive_capacity)))
adaptive_capacity %>%
select(-sites) %>%
mutate(adaptive_capacity=rowSums(.))
adaptive_capacity = cbind(adaptive_capacity, normalized)
adaptive_capacity
pca.files[each.file] %>%
read.csv(header=T) %>%
select(sites,Dim.1) %>>%
(~this.index.score) %>%
select(2) %>>%
(~max.score <- max (.)) %>>%
(~min.score <- min (.))
NormFunc(this.index.score[,2]) %>%
as.data.frame %>>% (~normalized)
names(this.index.score) <- c("sites",this.index)
this.index.score
normalized
NormFunc(this.index.score[,2]) %>%
as.data.frame %>>% cbind(this.index.score)
names(normalized) <- c("normalized","sites",this.index)
NormFunc(this.index.score[,2]) %>%
as.data.frame %>>%
cbind(this.index.score) %>>%
(~normalized)
names(normalized) <- c("normalized","sites",this.index)
adaptive_capacity = as.data.frame(matrix(0,nrow=nrow(scores.pca),ncol=0))
adaptive_capacity = cbind(adaptive_capacity, normalized)
pca.files[each.file] %>%
read.csv(header=T) %>% #read file
select(Dim.1) %>>% #select sites and scores
(~this.index.score)%>>% #calculate max and min of scores
(~max.score <- max (.)) %>>%
(~min.score <- min (.))
pca.files[each.file] %>%
read.csv(header=T) %>% #read file
select(Dim.1) %>>% #select sites and scores
(~this.index.score)%>>% #calculate max and min of scores
(~max.score <- max (.)) %>>%
(~min.score <- min (.)) %>%
NormFunc((.),[,1])
pca.files[each.file] %>%
read.csv(header=T) %>% #read file
select(Dim.1) %>>% #select sites and scores
(~this.index.score)%>>% #calculate max and min of scores
(~max.score <- max (.)) %>>%
(~min.score <- min (.)) %>%
NormFunc((.)[,1])
NormFunc(this.index.score[,1]) %>%
as.data.frame %>>%
(~normalized)
names(normalized) <- c(this.index)
normalized
adaptive_capacity %>%
mutate(adaptive_capacity=rowSums(.)) %>>%
(~adaptive_capacity)
adaptive_capacity %>%
mutate(adaptive_capacity=rowSums(.))
adaptive_capacity
adaptive_capacity = as.data.frame(matrix(0,nrow=nrow(scores.pca),ncol=0))
adaptive_capacity = cbind(adaptive_capacity, normalized)
adaptive_capacity %>%
mutate(adaptive_capacity=rowSums(.))
adaptive_capacity %>%
mutate(adaptive_capacity=rowSums(.)) %>>%
mutate(normalized_AC=NormFunc(adaptive_capacity[,"adaptive_capacity"]))
adaptive_capacity %>%
mutate(adaptive_capacity=rowSums(.)) %>>%
(~adaptive_capacity) %>%
mutate(normalized_AC=NormFunc(adaptive_capacity[,"adaptive_capacity"]))
mutate(adaptive_capacity , normalized_AC=NormFunc(adaptive_capacity[,"adaptive_capacity"]))
mutate(adaptive_capacity , normalized_AC = NormFunc(adaptive_capacity[,"adaptive_capacity"]))
mutate(adaptive_capacity , normalized_AC = as.data.frame(NormFunc(adaptive_capacity[,"adaptive_capacity"])))
as.data.frame(NormFunc(adaptive_capacity[,"adaptive_capacity"])
)
source('E:/Archivos/1Archivos/Articulos/En preparacion/Vulnerability_GOC_Pacific/Analysis/PCA_adaptive_capacity_3.R')
pca.files[each.file] %>%
read.csv(header=T) %>%
select(sites) %>>%
cbind(normalized_AC)
